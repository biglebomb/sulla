import { Page } from 'puppeteer';
import { Chat, LiveLocationChangedEvent, ChatState } from './model/chat';
import { Contact } from './model/contact';
import { Message } from './model/message';
import { Id } from './model/id';
import { ParticipantChangedEventModel } from './model/group-metadata';
export declare const getBase64: (url: string) => Promise<string>;
export declare class Whatsapp {
    page: Page;
    constructor(page: Page);
    onMessage(fn: (message: Message) => void): void;
    onAnyMessage(fn: (message: Message) => void): Promise<void>;
    onStateChanged(fn: (state: string) => void): void;
    setMyStatus(newStatus: string): Promise<void>;
    setMyName(newName: string): Promise<void>;
    setChatState(chatState: ChatState, chatId: String): Promise<any>;
    getConnectionState(): Promise<any>;
    onAck(fn: (message: Message) => void): void;
    kill(): Promise<boolean>;
    forceRefocus(): Promise<void>;
    onLiveLocation(chatId: string, fn: (liveLocationChangedEvent: LiveLocationChangedEvent) => void): Promise<any>;
    onParticipantsChanged(groupId: string, fn: (participantChangedEvent: ParticipantChangedEventModel) => void): Promise<void>;
    onAddedToGroup(fn: (chat: Chat) => void): Promise<void>;
    sendText(to: string, content: string): Promise<string>;
    sendTextToID(to: string, content: string): Promise<string>;
    sendMessageWithThumb(thumb: string, url: string, title: string, description: string, chatId: string): Promise<void>;
    sendLocation(to: string, lat: any, lng: any, loc: string): Promise<void>;
    getGeneratedUserAgent(userA?: string): Promise<void>;
    sendImage(to: string, base64: string, filename: string, caption: string): Promise<void>;
    reply(to: string, content: string, quotedMsg: any): Promise<void>;
    sendFile(to: string, base64: string, filename: string, caption: string): Promise<void>;
    sendVideoAsGif(to: string, base64: string, filename: string, caption: string): Promise<void>;
    sendGiphy(to: string, giphyMediaUrl: string, caption: string): Promise<void>;
    getMe(): Promise<any>;
    getBusinessProfilesProducts(id: string): Promise<void>;
    sendImageWithProduct(to: string, base64: string, caption: string, bizNumber: string, productId: string): Promise<void>;
    sendContact(to: string, contactId: string | string[]): Promise<any>;
    simulateTyping(to: string, on: boolean): Promise<void>;
    forwardMessages(to: string, messages: any, skipMyMessages: boolean): Promise<any>;
    getAllContacts(): Promise<Contact[]>;
    getWAVersion(): Promise<String>;
    isConnected(): Promise<Boolean>;
    getBatteryLevel(): Promise<Number>;
    getAllChats(withNewMessageOnly?: boolean): Promise<any>;
    getAllChatsWithMessages(withNewMessageOnly?: boolean): Promise<any>;
    getAllGroups(withNewMessagesOnly?: boolean): Promise<any>;
    getGroupMembersId(groupId: string): Promise<Id[]>;
    leaveGroup(groupId: string): Promise<any>;
    getGroupMembers(groupId: string): Promise<Contact[]>;
    getContact(contactId: string): Promise<Contact>;
    getChatById(contactId: string): Promise<Chat>;
    getChat(contactId: string): Promise<Chat>;
    getProfilePicFromServer(chatId: string): Promise<any>;
    sendSeen(chatId: string): Promise<void>;
    loadEarlierMessages(contactId: string): Promise<Message[]>;
    getStatus(contactId: string): Promise<void>;
    asyncLoadAllEarlierMessages(contactId: string): Promise<void>;
    loadAllEarlierMessages(contactId: string): Promise<void>;
    deleteMessage(contactId: string, messageId: string[] | string, onlyLocal?: boolean): Promise<any>;
    checkNumberStatus(contactId: string): Promise<any>;
    getUnreadMessages(includeMe: boolean, includeNotifications: boolean, use_unread_count: boolean): Promise<any>;
    getAllNewMessages(): Promise<any>;
    getAllUnreadMessages(): Promise<any>;
    getAllMessagesInChat(chatId: string, includeMe: boolean, includeNotifications: boolean): Promise<[Message]>;
    loadAndGetAllMessagesInChat(chatId: string, includeMe: boolean, includeNotifications: boolean): Promise<[Message]>;
    createGroup(groupName: string, contacts: string | string[]): Promise<any>;
    removeParticipant(idGroup: string, idParticipant: string): Promise<void>;
    addParticipant(idGroup: string, idParticipant: string): Promise<void>;
    promoteParticipant(idGroup: string, idParticipant: string): Promise<void>;
    demoteParticipant(idGroup: string, idParticipant: string): Promise<void>;
    getGroupAdmins(idGroup: string): Promise<Contact[]>;
}
export { useragent } from '../config/puppeteer.config';
